program     -> declaration* EOF ;

declaration -> class_decl
             | fun_decl
             | var_decl
             | statement ;

class_decl  -> "class" IDENTIFIER ( "<" IDENTIFIER )?
               "{" function* "}" ;

fun_decl    -> "fun" function ;

function    -> IDENTIFIER "(" parameters? ")" block ;

parameters  -> IDENTIFIER ( "," IDENTIFIER )* ;

var_decl    -> "var" IDENTIFIER ( "=" expression )? ";" ;

statement   -> if_stmt
             | return
             | expr_stmt 
             | print_stmt 
             | while_stmt
             | block ;

return      -> "return" expression? ";" ;

for_stmt    -> "for" "(" ( varDecl | expr_stmt | ";" ) 
               expression? ";" 
               expression? ")" ;

while_stmt  -> "while" "(" expression ")" statement ;

if_stmt     -> "if" "(" expression ")" statement
             ( "else" statement )? ;

block       -> "{" declaration* "}" ;

expr_stmt   -> expression ";" ;

print_stmt  -> "print" expression ";" ;

expression  -> assignment ;

assignment  -> ( call "." )? IDENTIFIER "=" assignment
             | logic_or ;

logic_or    -> logic_and ( "or" logic_and )* ;

logic_and   -> equality ( "and" equality )* ;

equality    -> comparison ( ( "!=" | "==" ) comparison )* ;

comparison  -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;

term        -> factor ( ( "+" | "-" ) factor )* ;

factor      -> unary ( ( "/" | "*" ) unary )* ;

unary       -> ( "!" | "-" ) unary 
             | call ;

call        -> primary ( "(" arguments? ")" | "." IDENTIFIER )* ;

arguments   -> expression ( "," expression )* ;

primary     -> NUMBER | STRING | IDENTIFIER
             | "true" | "false" | "nil"
             | lambda
             | "(" expression ")" ;
             | "super" "." IDENTIFIER ;

lambda      -> "fun" "(" parameters? ")" statement
